Приклад порушення SRP
Нехай в системі є клас, що представляє в ній робітника:

public class Employee {
  private String name;
  // інші поля

  public String getName() {
      return name;
  }
  // інші методи

  public void printReport() {
      // код для друкування звіту
  }
}

Крім цього, існує можливість друкувати звіт про робітника за допомогою методу printReport(). Це і є порушення SRP.

Для прикладу, розглянемо випадок зміни формату звіту. Це змусить програмістів редагувати printReport(), що, можливо, призведе до зміни робочого коду, що відповідає за представлення робітника. Та навпаки, якщо у клас буде додано будь-яка нова функціональність, наприклад поле telNumber, то ці зміни будуть впливати на вміст звіту. А редагуючи вміст, можна зачепити формат звіту.

Очевидно, що проблема полягає в багатоцільовому Employee. Тому її рішення буде наступним — розділити його функціональність, наприклад так:

public class Employee {
  private String name;
  // інші поля

  public String getName() {
      return name;
  }
  // інші методи
}
public class Reporter {
  public void printReport(Employee worker) {
      // код для друкування звіту
  } 
}

Переваги та недоліки
Серед плюсів варто відмітити такі:

протидіє дублюванню коду, адже якщо функціональність розташована в неправильному місці, то доведеться копіювати її в потрібне;
зменшує можливість зміни вже випробуваного коду;
забезпечує відповідність назв класів та їх функціональності, що полегшує життя тим, хто обслуговуватиме цей код в майбутньому.
Мінус використання полягає в зростанні кількості класів, що приводить до зростання складності системи.
